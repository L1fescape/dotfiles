#!/bin/bash

# dotfile directory
dd=${DOTFILE_DIRECTORY:-~/dotfiles}
# dotfile install directory
di="$dd/install"

# import helper functions
. $di/functions

prompt_warning () {
  # warn user about overwriting files
  info "WARNING: This script will remove all current dotfile settings. \n"
  info "Would you like to continue? [Y/n]: "
  read cont
  printf "\n"
  if [ "$cont" = "n" ]; then
    echo "Exited."
    exit
  fi
}

install_dotfiles () {
  info 'Installing dotfiles'

  # sym link files
  . $di/symlink

  # setup gitconfig
  . $di/git

  # setup vim
  git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  vim +BundleInstall +qall
}

install_programs () {
  # user must choose a valid os option. loop until they do.
  pkgmgmt=true
  while $pkgmgmt; do
    # check which os we're running
    info "Operating System [ a:arch, d:debian, r:redhat, o:osx ]: "
    read os
    printf "\n"

    # pick which package manager to use based on os
    case "$os" in
      "a")
        pkgmgmt="pacman -S"
        ;;
      "d")
        pkgmgmt="apt-get install"
        ;;
      "r")
        pkgmgmt="yum install"
        ;;
      "o")
        pkgmgmt="brew install"
        ;;
      *)
        echo "Please select a valid Operating System."
        ;;
    esac
  done


  # prepend sudo if not osx
  [ $os != "o" ] && pkgmgmt="sudo $pkgmgmt"


  # If osx, check if Homebrew is installed
  if [ "$os" = "o" ]; then
    which -s brew
    if [[ $? != 0 ]] ; then
        # Install Homebrew
        info "Installing Homebrew"
        ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
    fi
  fi

  # Update packages
  info "Updating Packages"
  $pkgmgmt update

  # Install Zsh
  info "Installing Zsh \n"
  $pkgmgmt zsh
  info "Setting zsh as default shell \n"
  chsh -s /bin/zsh
  info "Downloading and installing ohmyzsh \n"
  # wget isn't installed on osx by default
  if [ "$os" = "o" ]; then
    # Install wget with IRI support
    brew install wget --enable-iri
  fi
  wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh


  # if osx, install things a little differently
  if [ "$os" = "o" ]; then
    brew install readline sqlite gdbm --universal
    # install python with easy_install
    brew install python --universal --framework 
    # install pip
    sudo easy_install pip
    # Install GNU core utilities (those that come with OS X are outdated)
    brew install coreutils
    echo "Donâ€™t forget to add $(brew --prefix coreutils)/libexec/gnubin to \$PATH."
    # Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed
    brew install findutils
    # Install Bash 4
    brew install bash
    brew install tree
    brew install lynx
    brew install node
    brew install z
    # Install native apps
    brew tap phinze/homebrew-cask
    brew install brew-cask

    installcask() {
      if brew cask info "${@}" | grep "Not installed" > /dev/null; then
        brew cask install "${@}"
      else
        echo "${@} is already installed."
      fi
    }

    installcask dropbox
    installcask google-drive
    installcask google-chrome
    installcask google-chrome-canary
    installcask iterm2
    installcask sublime-text
    installcask virtualbox
    installcask vlc
    installcask alfred
    # Link brew cask apps to Applications dir
    brew cask linkapps --appdir="/Applications"
    # Remove outdated versions from the cellar
    brew cleanup

    # setup mac defaults
    . ~/dotfiles/osx/osx-init
  else
    $pkgmgmt python-pip vim
  fi

  # vimpager
  $pkgmgmt vimpager

  # Ruby shits
  $pkgmgmt ruby-install
  ruby-install ruby
  $pkgmgmt chruby

  # install virtualenv and virtualenvwrapper
  sudo pip install virtualenv virtualenvwrapper

  # install tmux and curl
  $pkgmgmt tmux curl
}


# let's do this!
prompt_warning
install_programs
install_dotfiles

success "All done!"
