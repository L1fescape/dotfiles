" Vundle
source ~/.vim/bundles.vim

" Reload VimRC
map <C-S> :so $MYVIMRC<cr>

" Swag 
colorscheme Tomorrow-Night-Eighties " set colors
set term=screen-256color            " full color support
set cursorline                      " shows the horizontal cursor line
set anti                            " 
set guifont=Ubuntu\ Mono\ Bold\ 10  " set font
set laststatus=2                    " always show the statusline
set nocompatible                    " choose no compatibility with legacy vi
syntax on                           " turn syntax highlighting on
set encoding=utf-8                  " set encoding to utf-8
set showcmd                         " display incomplete commands
filetype plugin indent on           " load file type plugins + indentation
set fileformats+=dos
"match Error /\%81v.\+/              " higlight text longer than 80 columns
hi clear SpellBad
hi SpellBad cterm=underline
map <F5> :set spell! spelllang=en_us<CR>

" make quitting easier
:command WQ wq
:command Wq wq
:command W w
:command Q q

" Tabs and Spaces
set wrap                            " wrap lines
map <C-W>W :set wrap!<CR>           " toggle wrap
set tabstop=2 shiftwidth=2          " a tab is two spaces
set backspace=indent,eol,start      " backspace through everything in insert mode
set softtabstop=2                   " respect hard tabs
set expandtab                       " convert tabs to spaces
nnoremap QQ :QuitTab<cr>
command! QuitTab call s:QuitTab()
function! s:QuitTab()
  try
    tabclose
  catch /E784/ " Can't close last tab
    qall
  endtry
endfunction
" allow toggling between local and default mode
function ToggleTab()
  if &expandtab
    set shiftwidth=4
    set softtabstop=0
    set noexpandtab
  else
    set shiftwidth=2
    set softtabstop=2
    set expandtab
  endif
endfunction
nmap ,t :call ToggleTab()<CR>

" Creating tabs and toggling
nmap L :tabn<CR>
nmap H :tabp<CR>
nmap <C-T> :tabnew<CR>

" Who uses semi colon anyway?
nnoremap ; :

" Turn off Swap Files
set noswapfile
set nobackup
set nowb 

"" Searching
set hlsearch                        " highlight matches
set incsearch                       " incremental searching
set ignorecase                      " searches are case insensitive ...
set smartcase                       " ... unless they contain at least one capital letter

autocmd! FileType mkd,markdown,md setlocal syn=off " Don't syntax highlight markdown because it's often wrong

" Indent if we're at the beginning of a line. Else, do completion.
" Borrowed from @garybernhardt
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" NerdTree
nmap <F1> :NERDTreeToggle<CR>       " mapping f1 to NERDTreeToggle
function! NERDTreeQuit()
    redir => buffersoutput
    silent buffers
    redir END
    "                     1BufNo  2Mods.     3File           4LineNo
    let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
    let windowfound = 0

    for bline in split(buffersoutput, "\n")
        let m = matchlist(bline, pattern)

        if (len(m) > 0)
            if (m[2] =~ '..a..')
                let windowfound = 1
            endif
        endif
    endfor

    if (!windowfound)
        quitall
    endif
endfunction
autocmd WinEnter * call NERDTreeQuit()
map ,n :call NERDTreeTabsToggle()<CR>

noremap <F2> :GundoToggle<CR>       " mapping f2 to Gundo
set pastetoggle=<C-O>

" Splits
"" switching splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
"" resizing splits
nnoremap = <c-w>+
nnoremap - <c-w>-
nnoremap + <c-w><
nnoremap _ <c-w>>
"" new splits
nnoremap <Bar> <c-w>v
nnoremap \ <c-w>s
"" open new splits to right and bottom
set splitbelow
set splitright

" Toggle Mouse mode on and off
function! ToggleMouse()
  if &mouse == "a"
    set mouse=
    echo "Mouse Off"
  else
    set mouse=a
    echo "Mouse On"
  endif
endfunction
nmap <C-M> :call ToggleMouse()<CR>
set mouse=a                         " Enable mouse by default

" Numbers
map <C-N> :set number!<CR>          " Toggle showing line numbers on and off
set number                          " Show line numbers by default
nnoremap <F4> :NumbersToggle<CR>    " mapping for numbers plugin
let g:enable_numbers = 0            " turn off numbers plugin by default

"" timeout
set ttimeout
set ttimeoutlen=0

" Configure vimclojure
let vimclojure#HighlightBuiltins=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

" Ctrl-Space eval selection
vnoremap <C-Space> :Eval<cr>
vmap <C-@> <C-Space>

" Recognize ClojureScript files as Clojure
au BufNewFile,BufRead *.cljs setf clojure

" Recognize Go files
au BufRead,BufNewFile *.go set filetype=go

" Settings for Airline
let g:airline_theme='light'
let g:airline_powerline_fonts=1
