" Vundle
source ~/.vim/bundles.vim


" Set leader character
let mapleader=","


" Reload VimRC
nmap <C-S> :so ~/.vimrc<CR>


" Swag 
colorscheme Tomorrow-Night-Eighties " set colors
set term=screen-256color            " full color support
set cursorline                      " shows the horizontal cursor line
set anti                            " enable anti-aliased fonts 
set guifont=Ubuntu\ Mono\ Bold\ 10  " set font
set laststatus=2                    " always show the statusline
set nocompatible                    " choose no compatibility with legacy vi
syntax on                           " turn syntax highlighting on
set encoding=utf-8                  " set encoding to utf-8
set showcmd                         " display incomplete commands
filetype plugin indent on           " load file type plugins + indentation
hi clear SpellBad
hi SpellBad cterm=underline
map <leader>s :set spell! spelllang=en_us<CR>
map <leader>c :call ToggleColorColumn()<CR>
let g:togglecolumn_is_on = 0
function! ToggleColorColumn()
	if g:togglecolumn_is_on
		let g:togglecolumn_is_on = 0
		set colorcolumn=
	else
		let g:togglecolumn_is_on = 1
		set colorcolumn=80
	endif
endfunction




" make quitting easier
:command WQ wq
:command Wq wq
:command W w
:command Q q


" Tabs and Spaces
set wrap                            " wrap lines
map <leader>w :set wrap!<CR>        " toggle wrap
set tabstop=2 shiftwidth=2          " a tab is two spaces
set backspace=indent,eol,start      " backspace through everything in insert mode
set softtabstop=2                   " respect hard tabs
set expandtab                       " convert tabs to spaces
nnoremap QQ :QuitTab<CR>
command! QuitTab call s:QuitTab()
function! s:QuitTab()
  try
    tabclose
  catch /E784/ " Can't close last tab
    qall
  endtry
endfunction
" allow toggling between local and default mode
function ToggleTab()
  if &expandtab
    set shiftwidth=2
    set softtabstop=0
    set noexpandtab
  else
    set shiftwidth=2
    set softtabstop=2
    set expandtab
  endif
endfunction
nmap <leader><space> :call ToggleTab()<CR>

" Creating tabs and toggling
nmap L :tabn<CR>
nmap H :tabp<CR>
nmap <C-T> :tabnew<CR>


" Who uses semi colon anyway?
nnoremap ; :


" Turn off Swap Files
set noswapfile
set nobackup
set nowb 


"" Searching
set hlsearch                        " highlight matches
set incsearch                       " incremental searching
set ignorecase                      " searches are case insensitive ...
set smartcase                       " ... unless they contain at least one capital letter


"" Ctrl P settings
let g:ctrlp_custom_ignore = '\v[\/]\.?(git|hg|svn|node_modules|_site)$'


" Indent if we're at the beginning of a line. Else, do completion.
" Borrowed from @garybernhardt
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction
  
function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction


" NerdTree
nmap <leader>t :NERDTreeToggle<CR>       " mapping f1 to NERDTreeToggle
"" Close NERDTree if it's the only remaining window
function! NERDTreeQuit()
    redir => buffersoutput
    silent buffers
    redir END
    "                     1BufNo  2Mods.     3File           4LineNo
    let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
    let windowfound = 0

    for bline in split(buffersoutput, "\n")
        let m = matchlist(bline, pattern)

        if (len(m) > 0)
            if (m[2] =~ '..a..')
                let windowfound = 1
            endif
        endif
    endfor

    if (!windowfound)
        quitall
    endif
endfunction
"" NERDTree autocommands
autocmd WinEnter * call NERDTreeQuit()
autocmd VimEnter * if &filetype !=# 'gitcommit' | NERDTree | wincmd p | endif " give current file focus instead of NERDTree
"" NERDTree settings
let nerdtree_tabs_open_on_console_startup=1 " open NERDTree on startup


noremap <leader>u :GundoToggle<CR>        " mapping for Gundo
set pastetoggle=<leader>p                 " toggle paste


" Splits
"" switching splits
nnoremap <leader>j <C-W><C-J>
nnoremap <leader>k <C-W><C-K>
nnoremap <leader>l <C-W><C-L>
nnoremap <leader>h <C-W><C-H>
"" resizing splits
nnoremap <leader>= <c-w>+
nnoremap <leader>- <c-w>-
nnoremap <leader>+ <c-w><
nnoremap <leader>_ <c-w>>
"" new splits
nnoremap <leader><Bar> <c-w>v
nnoremap <leader>\ <c-w>s
"" open new splits to right and bottom
set splitbelow
set splitright


" Toggle Mouse mode on and off
function! ToggleMouse()
  if &mouse == "a"
    set mouse=
    echo "Mouse Off"
  else
    set mouse=a
    echo "Mouse On"
  endif
endfunction
nmap <leader>m :call ToggleMouse()<CR>
set mouse=a                         " Enable mouse by default


" Numbers
map <leader>n :set number!<CR>      " Toggle showing line numbers on and off
set number                          " Show line numbers by default
nnoremap <F4> :NumbersToggle<CR>    " mapping for numbers plugin
let g:enable_numbers = 0            " turn off numbers plugin by default


"" timeout
set ttimeout
set ttimeoutlen=0


" Configure vimclojure
let vimclojure#HighlightBuiltins=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1


" Ctrl-Space eval selection
vnoremap <C-Space> :Eval<cr>
vmap <C-@> <C-Space>

" Fileetypes
autocmd! FileType mkd,markdown,md setlocal syn=off " Don't syntax highlight markdown because it's often wrong
"" Recognize ClojureScript files as Clojure
au BufNewFile,BufRead *.cljs setf clojure
"" Recognize Go files
au BufRead,BufNewFile *.go set filetype=go
"" Set less as css
autocmd BufRead,BufNewFile *.less,*.scss,*.css set filetype=css omnifunc=csscomplete#CompleteCSS
autocmd BufRead,BufNewFile *.handlebars set filetype=html


" Settings for Airline
let g:airline_theme='light'
let g:airline_powerline_fonts=1


" Read in any marchine-specific vim settings
if isdirectory(expand('$HOME/.env'))
  for f in split(glob('$HOME/.env/*.vim'), '\n')
    exe 'source' f
  endfor
endif
