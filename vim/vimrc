" Settings and Key bindings
" =========================

" Vundle
source ~/.vim/bundles.vim

" Set to auto read when a file is changed from the outside
set autoread

" Remove startup screen
set shortmess=I

" set the leader key
let mapleader = ","
let g:mapleader = ","

" make saving and quitting easier
command W w
command Q q
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>

" save file as sudo (useful for handling the permission-denied error)
cnoremap sudow w !sudo tee % >/dev/null

" Reload VimRC
nmap <leader>r :so ~/.vimrc<CR>

" Turn on the WiLd menu for command completion
set wildmode=longest:list,full

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" Set colors
try
  colorscheme Tomorrow-Night-Eighties
catch
endtry
set background=dark

" show command in bottom bar
set showcmd

" full color support
set term=screen-256color

" set encoding to utf-8
set encoding=utf-8

" enable anti-aliased fonts 
set anti

" set font
set guifont=Ubuntu\ Mono\ Bold\ 10

" Enable syntax highlighting
syntax enable

" shows the horizontal cursor line
set cursorline

" Use Unix as the standard file type
set ffs=unix,dos,mac

" always show the statusline
set laststatus=2

" load file type plugins + indentation
filetype plugin indent on 

" settings for showing grammatical errors
hi SpellBad cterm=underline
hi clear SpellBad
map <leader>s :set spell! spelllang=en_us<CR>

" toggle paste
nmap \o :set paste!<CR>

" toggle column at 80 characters
nmap \c :call ToggleColorColumn()<CR>

" wrap lines
set wrap

" redraw only when we need to
set lazyredraw

" show invisibles
set list listchars=tab:▸\ ,eol:¬,trail:•

" a tab is two spaces
set tabstop=2 shiftwidth=2

" backspace through everything in insert mode
set backspace=indent,eol,start

" respect hard tabs
set softtabstop=2

" convert tabs to spaces
set expandtab

" switch between hard tabs and spaces
nmap \t :call ToggleTab()<CR>

" Creating tabs and toggling
nmap L :tabn<CR>
nmap H :tabp<CR>
nmap <C-T> :tabnew<CR>

" enable folding
set foldenable

" open most folds by default
set foldlevelstart=10

" 10 nested fold max
set foldnestmax=10

" space open/closes folds
nnoremap <space> za

" fold based on indent level
set foldmethod=indent

" highlight last inserted text
nnoremap gV `[v`]

" Turn off Swap Files
set noswapfile
set nobackup
set nowb 

" highlight search matches
set hlsearch

" incremental searching
set incsearch

" searches are case insensitive ...
set ignorecase

" ... unless they contain at least one capital letter
set smartcase

" This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" switching splits
nnoremap <leader>j <C-W><C-J>
nnoremap <leader>k <C-W><C-K>
nnoremap <leader>l <C-W><C-L>
nnoremap <leader>h <C-W><C-H>

" resizing splits
nnoremap <leader>= <c-w>+
nnoremap <leader>- <c-w>-
nnoremap <leader>+ <c-w><
nnoremap <leader>_ <c-w>>

" new splits
nnoremap <leader><Bar> <c-w>v
nnoremap <leader>\ <c-w>s

" open new splits to right and bottom
set splitbelow
set splitright

" Enable mouse by default
nmap <leader>m :call ToggleMouse()<CR>
set mouse=a

" Show line numbers by default
set number

" Toggle showing line numbers on and off
nmap \n :setlocal number!<CR>

" turn off numbers plugin by default
let g:enable_numbers = 0

"" timeout
set ttimeout
set ttimeoutlen=0

" Fileetypes
autocmd! FileType mkd,markdown,md setlocal syn=off " Don't syntax highlight markdown because it's often wrong

" Recognize ClojureScript files as Clojure
au BufNewFile,BufRead *.cljs setf clojure

" Recognize Go files
au BufRead,BufNewFile *.go set filetype=go

" Syntax hightlighting for CSS, Less, and SCSS
autocmd BufRead,BufNewFile *.less,*.css set filetype=css omnifunc=csscomplete#CompleteCSS
au BufRead,BufNewFile *.scss set filetype=scss.css
autocmd FileType scss set iskeyword+=-

" Recognize Hanglebars files as html
autocmd BufRead,BufNewFile *.handlebars set filetype=html

" Reload current file
nmap <C-e> :e<CR>

" save session (restore with `vim -S`)
nnoremap <leader>s :mksession<CR>


" Functions
" =========

let g:togglecolumn_is_on = 0
function! ToggleColorColumn()
	if g:togglecolumn_is_on
		let g:togglecolumn_is_on = 0
		set colorcolumn=
	else
		let g:togglecolumn_is_on = 1
		set colorcolumn=80
	endif
endfunction

" allow toggling between local and default mode
function ToggleTab()
	if &expandtab
		set shiftwidth=2
		set softtabstop=0
		set noexpandtab
	else
		set shiftwidth=2
		set softtabstop=2
		set expandtab
	endif
endfunction

" Indent if we're at the beginning of a line. Else, do completion.
" Borrowed from @garybernhardt
function! InsertTabWrapper()
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<tab>"
	else
		return "\<c-p>"
	endif
endfunction

" Toggle Mouse mode on and off
function! ToggleMouse()
	if &mouse == "a"
		set mouse=
		echo "Mouse Off"
	else
		set mouse=a
		echo "Mouse On"
	endif
endfunction

function! Solarized()
  colorscheme solarized
  set background=light
endfunction
map <leader>s :call Solarized()<CR>

" Plugin Settings
" ===============

" Ctrl P settings
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode = 0
 
" ag.vim settings
if executable('ag')
  nnoremap <leader>a :Ag
  nnoremap <C-F> :Ag

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


" Settings for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" NerdTree
nmap <leader>n :NERDTreeTabsToggle<CR>
"" Close NERDTree if it's the only remaining window
function! NERDTreeQuit()
	redir => buffersoutput
	silent buffers
	redir END
	"                     1BufNo  2Mods.     3File           4LineNo
	let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
	let windowfound = 0

	for bline in split(buffersoutput, "\n")
		let m = matchlist(bline, pattern)

		if (len(m) > 0)
			if (m[2] =~ '..a..')
				let windowfound = 1
			endif
		endif
	endfor

	if (!windowfound)
		quitall
	endif
endfunction

"" NERDTree autocommands
autocmd WinEnter * call NERDTreeQuit()
" autocmd VimEnter * if &filetype !=# 'gitcommit' | NERDTree | wincmd p | endif " give current file focus instead of NERDTree
"" NERDTree settings
let nerdtree_tabs_open_on_console_startup=0 " don't open NERDTree on startup

" mapping for Gundo
noremap \u :GundoToggle<CR>

" Settings for Airline
let g:airline_theme='light'
let g:airline_powerline_fonts=1

" Settings for Vim Gutter
exe 'hi! SignColumn guibg=NONE ctermbg=235'

" Read in any marchine-specific vim settings
if isdirectory(expand('$HOME/.env'))
	for f in split(glob('$HOME/.env/*.vim'), '\n')
		exe 'source' f
	endfor
endif

